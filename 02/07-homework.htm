<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
    /* @import url('./assets/css/bootstrap.min.css'); */
    * {
      padding: 0;
      margin: 0;
    }

    body {
      font-family: Arial, "Microsoft YaHei";
    }

    .box {
      width: 400px;
      margin: 50px auto 0;
    }

    .puzzle-wrap {
      width: 400px;
      height: 400px;
      margin-bottom: 40px;
      padding: 0;
      background: #ccc;
      list-style: none;
    }

    .puzzle {
      float: left;
      width: 100px;
      height: 100px;
      font-size: 20px;
      background: #f90;
      text-align: center;
      line-height: 100px;
      border: 1px solid #ccc;
      box-shadow: 1px 1px 4px;
      text-shadow: 1px 1px 1px #B9B4B4;
      cursor: pointer;
      box-sizing: border-box;
    }

    .puzzle-empty {
      background: #ccc;
      box-shadow: inset 2px 2px 18px;
    }

    .btn-reset {
      box-shadow: inset 2px 2px 18px;
    }
  </style>
</head>

<body>
  <div class="box" id='app'>
    <ul class="puzzle-wrap">
      <li :class="{'puzzle': true, 'puzzle-empty': !puzzle}" v-for="(puzzle,index) in puzzles" v-text="puzzle"
        @click="moveFn(index)"></li>
    </ul>
    <button class="btn btn-warning btn-block btn-reset" @click="render">重置游戏</button>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>

  <script>
    new Vue({
      el: '#app',
      data() {
        return {
          puzzles: [1,2,10,3,5,8,9,11,13,14,4,7,6,15,12,]
        }
      },

      // 与点击的索引有关联
      // 上下左右的数字 也是有关系
      methods:{
        moveFn(index){
          // 1.获取index对应的值
          var text = event.target.innerText
          // // 获取空元素所在位置索引
          // var emptyIndex
          // 情况一 不存在空元素:刚开始,只需要判断点击的index是11还是14
          if (this.puzzles.length == 15) {
            if (index == 11) {
              // 删除数组中text = 7的元素
              this.puzzles.splice(index,1,'')
              // this.puzzles.splice(index,0,'') // 插入空元素
              // 插入text = 7到数组尾端
              this.puzzles.push(Number(text))
              // this.puzzles.splice()
            }else if (index == 14) {
              // 直接在14的位置插入一个空元素
              this.puzzles.splice(index,0,'')
            }
          } else { // 情况二:此时数组里已经存在空元素
            // 获取空元素的索引值
            let emptyIndex = this.puzzles.indexOf('')
            // // 1.点击的index在空元素的上方
            // 获取index和emptyIndex的差值
            let dValue = index - emptyIndex
            if (dValue == -1 || dValue == -4 || dValue == 4 || dValue == 1) {
              // 将空元素替换为text
              this.puzzles.splice(emptyIndex,1,Number(text))
              // 将text替换为空元素
              this.puzzles.splice(index,1,'')
             } //else  if (dValue == 4 || dValue == 1){
            //   // 将空元素位置的元素替换为text
            //   this.puzzles.splice(emptyIndex,1,Number(text))
            //   // 将text位置的元素替换为空元素
            //   this.puzzles.splice(index,1,'')
            // }
          }
          if (this.puzzles == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,'']){
            alert('恭喜你,闯关成功')
          }
        },
        render(){
          this.puzzles = this.$options.data().puzzles
        }

      }

    })
  </script>
</body>

</html>
